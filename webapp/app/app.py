import streamlit as st
import pandas as pd
import pydeck as pdk
import wikipedia
import urllib.parse
import requests
from PIL import Image
from io import BytesIO


processed_file_path = "../../processed_data.csv"

try:
    data = pd.read_csv(processed_file_path)
    print("Donn√©es charg√©es avec succ√®s.")
except Exception as e:
    st.error(f"Erreur lors du chargement des donn√©es trait√©es : {e}")
    exit(1)


def set_png_as_page_bg_from_url(image_url):
    st.markdown(
        f"""
        <style>
        .stApp {{
            background: url("{image_url}");
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            display: flex;
            justify-content: center; /* Centrer horizontalement */
            align-items: flex-start; /* Positionner le conteneur en bas */
            padding-top: 10vh; /* Descendre le conteneur de 10% de la hauteur de la page */
            height: 100vh; /* Prendre toute la hauteur de la page */
        }}
        .block-container {{
            background-color: rgba(255, 255, 255, 0.85); /* Fond semi-transparent */
            padding: 2rem;
            border-radius: 15px; /* Bords arrondis */
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.3); /* L√©g√®re ombre */
            max-width: 900px; /* Largeur maximale plus large */
            text-align: justify; /* Texte justifi√© */
            line-height: 1.6; /* Espacement entre les lignes */
        }}
        h1 {{
            color: #2E8B57;  /* Couleur verte pour le titre */
            margin-bottom: 1rem;
            text-align: center; /* Centrer le titre */
        }}
        </style>
    """,
        unsafe_allow_html=True,
    )


background_image_url = "https://img.freepik.com/free-photo/top-view-camera-with-hat-compass_23-2148315771.jpg?t=st=1733214407~exp=1733218007~hmac=8c9dd03afdfa4bf48c121c31400e74aa9fd7d930534d056c6ab9f6da6e86a731&w=2000"


st.sidebar.title("Navigation")
options = st.sidebar.radio(
    "Aller √† :",
    [
        "üè° Accueil",
        "‚ÑπÔ∏è Info du moment",
        "üó∫Ô∏è Carte des polluants",
        "üìç Infos touristiques de la ville",
    ],
)

##### Page d'accueil

if options == "üè° Accueil":
    set_png_as_page_bg_from_url(background_image_url)

    st.title("Bienvenue sur ClimAventure üåç")
    st.markdown(
        """
        ClimAventure est une application innovante con√ßue pour vous informer sur la qualit√© de l'air tout en vous offrant des compl√©ments d'informations touristiques. 
        Notre priorit√© est de vous permettre de d√©couvrir les niveaux de pollution dans les r√©gions et villes de votre choix, tout en enrichissant votre exp√©rience de voyage avec des donn√©es culturelles et pratiques.

        ### Fonctionnalit√©s principales :
        
        - **Qualit√© de l'air** : Consultez des donn√©es pr√©cises sur les niveaux de pollution (NO2, CO, SO2, PM2.5, et autres polluants) pour chaque destination.
        - **Informations compl√©mentaires** : Acc√©dez √† des descriptions touristiques pour en apprendre davantage sur l‚Äôhistoire, les monuments embl√©matiques et les sp√©cificit√©s locales, gr√¢ce √† des r√©sum√©s interactifs de Wikip√©dia.
        - **Planification simplifi√©e** : Trouvez des outils pour organiser facilement votre voyage :
            - R√©servez votre h√©bergement sur Booking.com.
            - Consultez les guides et avis sur TripAdvisor.
            - Planifiez vos trajets avec Rome2Rio.
            - Visionnez des vid√©os inspirantes sur YouTube.

        ### Pourquoi utiliser ClimAventure ?
        - **Priorit√© √† la qualit√© de l'air** : Prenez des d√©cisions √©clair√©es gr√¢ce √† une visualisation claire des niveaux de pollution.
        - **Compl√©ment d'informations touristiques** : Enrichissez votre voyage avec des donn√©es culturelles et pratiques sans effort.
        - **Voyage responsable et bien pr√©par√©** : Combinez environnement et exploration pour une aventure harmonieuse.

        ### Comment utiliser l'application ?
        1. **Explorez la carte des polluants** : Identifiez les r√©gions ou villes avec des niveaux de pollution adapt√©s √† vos attentes.
        2. **D√©couvrez les atouts touristiques** : Apprenez-en davantage sur votre destination gr√¢ce √† des informations compl√©mentaires.
        3. **Planifiez votre s√©jour** : Profitez des outils int√©gr√©s pour organiser chaque d√©tail de votre voyage.

        **Avec ClimAventure, soyez inform√©, soyez inspir√©, et faites de votre voyage une exp√©rience responsable !** üåç
    """
    )
    image_path = "../image/11zon_cropped.png"

    image = Image.open(image_path)

    width, height = image.size
    new_size = (width // 6, height // 6)
    resized_image = image.resize(new_size)

    st.image(
        resized_image,
        caption="ClimAventure - Air Quality",
        use_container_width=False,
    )

elif options == "‚ÑπÔ∏è Info du moment":
    st.subheader(
        "Comme vous le savez, nos donn√©es sont r√©guli√®rement mises √† jour. üìù"
    )
    st.markdown(
        "<p style='font-size:16px;'> Voici la ville la plus et la moins pollu√©e, avec les informations les plus r√©centes!</p>",
        unsafe_allow_html=True,
    )
    st.divider()

    pollutants = data["Pollutant"].unique()
    selected_pollutant = st.selectbox(
        "S√©lectionnez un type de polluant :", options=pollutants
    )
    st.divider()

    filtered_data = data[data["Pollutant"] == selected_pollutant]

    statistiques_locations = (
        filtered_data.groupby(["City", "Country Label"])
        .agg(
            max_pollution=("Value", "max"),
            min_pollution=("Value", "min"),
            avg_pollution=("Value", "mean"),
        )
        .reset_index()
        .sort_values(by="avg_pollution", ascending=False)
    )

    pollution_maximale = statistiques_locations.iloc[0]
    pollution_minimale = statistiques_locations.iloc[-1]

    if selected_pollutant:
        st.subheader("Destination avec la Pollution Maximale")
        data_max = {
            "M√©trique": [
                "Ville",
                "Pays",
                "Pollution Maximale",
                "Pollution Minimale",
                "Pollution Moyenne",
            ],
            "Valeur": [
                pollution_maximale["City"],
                pollution_maximale["Country Label"],
                f"{pollution_maximale['max_pollution']:.2f}",
                f"{pollution_maximale['min_pollution']:.2f}",
                f"{pollution_maximale['avg_pollution']:.2f}",
            ],
        }
        data_max = pd.DataFrame(data_max)
        st.table(data_max)

        st.divider()

        st.subheader("Destination avec la Pollution Minimale")
        data_min = {
            "M√©trique": [
                "Ville",
                "Pays",
                "Pollution Maximale",
                "Pollution Minimale",
                "Pollution Moyenne",
            ],
            "Valeur": [
                pollution_minimale["City"],
                pollution_minimale["Country Label"],
                f"{pollution_minimale['max_pollution']:.2f}",
                f"{pollution_minimale['min_pollution']:.2f}",
                f"{pollution_minimale['avg_pollution']:.2f}",
            ],
        }
        data_min = pd.DataFrame(data_min)
        st.table(data_min)


##### Page "Carte des polluants"

elif options == "üó∫Ô∏è Carte des polluants":
    st.subheader(
        "Vous avez une id√©e du pays o√π passer votre s√©jour? ü§î"
    )

    st.markdown(
        "<p style='font-size:16px;'>Consultez notre carte mondiale pour visualiser les niveaux de pollution par r√©gion.</p>",
        unsafe_allow_html=True,
    )
    st.divider()

    col1, col2 = st.columns(2)

    with col1:
        countries = sorted(data["Country Label"].unique())
        selected_countries = st.multiselect(
            "S√©lectionnez un ou plusieurs pays :",
            options=["All"] + list(countries),
            default=["All"],
        )

    with col2:
        if "All" in selected_countries:
            pollutants = sorted(data["Pollutant"].unique())
        else:
            filtered_data_for_countries = data[
                data["Country Label"].isin(selected_countries)
            ]
            pollutants = sorted(
                filtered_data_for_countries["Pollutant"].unique()
            )

        if not pollutants:
            st.warning(
                "Aucun polluant disponible pour le(s) pays s√©lectionn√©(s)."
            )
            selected_pollutant = None
        else:
            selected_pollutant = st.selectbox(
                "S√©lectionnez un type de polluant :",
                options=pollutants,
            )

    if selected_pollutant:
        # Limites normales pour chaque polluant
        pollutant_limits = {
            "O3": "100 ¬µg/m¬≥ (8h moyenne, OMS)",
            "CO": "10 mg/m¬≥ (8h moyenne, OMS)",
            "NO2": "40 ¬µg/m¬≥ (annuel, OMS)",
            "SO2": "20 ¬µg/m¬≥ (24h moyenne, OMS)",
            "PM10": "20 ¬µg/m¬≥ (annuel, OMS)",
            "PM2.5": "10 ¬µg/m¬≥ (annuel, OMS)",
            "NO": "Non sp√©cifi√© (OMS)",
            "NOX": "Non sp√©cifi√© (OMS)",
            "BC": "Non sp√©cifi√© (OMS)",
            "PM1": "Non sp√©cifi√© (OMS)",
        }

        # Conseils pour chaque polluant
        pollutant_tips = {
            "O3": "√âvitez les activit√©s physiques intenses en plein air lors des pics d'ozone.",
            "CO": "Assurez une bonne ventilation √† l'int√©rieur et √©vitez les appareils de combustion non ventil√©s.",
            "NO2": "R√©duisez l'exposition dans les zones √† fort trafic routier.",
            "SO2": "Limitez le temps pass√© pr√®s des industries √©mettrices de SO2.",
            "PM10": "Portez un masque en cas de forte poussi√®re dans l'air.",
            "PM2.5": "Utilisez des purificateurs d'air √† l'int√©rieur pour limiter l'exposition.",
            "NO": "Limitez l'exposition √† proximit√© des √©missions industrielles.",
            "NOX": "R√©duisez votre pr√©sence dans les zones √† fort trafic automobile.",
            "BC": "Minimisez l'exposition pr√®s des moteurs diesel ou des combustions.",
            "PM1": "A√©rez les espaces int√©rieurs et utilisez des purificateurs d'air.",
        }

        st.markdown(
            f"### √Ä propos du polluant s√©lectionn√© : {selected_pollutant}"
        )
        st.markdown(
            f"- **Limite normale recommand√©e** : {pollutant_limits.get(selected_pollutant, 'Non disponible')}"
        )
        st.markdown(
            f"- **Conseil** : {pollutant_tips.get(selected_pollutant, 'Aucune recommandation disponible.')}"
        )
        st.markdown(
            f"[üåê En savoir plus sur {selected_pollutant}](https://fr.wikipedia.org/wiki/{selected_pollutant})"
        )

        if "All" in selected_countries:
            filtered_data = data[
                data["Pollutant"] == selected_pollutant
            ]
        else:
            filtered_data = data[
                (data["Pollutant"] == selected_pollutant)
                & (data["Country Label"].isin(selected_countries))
            ]

        if filtered_data.empty:
            st.warning(
                f"Aucune donn√©e disponible pour '{selected_pollutant}' dans '{', '.join(selected_countries)}'."
            )
        else:
            heatmap_layer = pdk.Layer(
                "HeatmapLayer",
                data=filtered_data,
                get_position=["Longitude", "Latitude"],
                get_weight="Value",
                radiusPixels=60,
                opacity=0.8,
            )

            view_state = pdk.ViewState(
                latitude=filtered_data["Latitude"].mean(),
                longitude=filtered_data["Longitude"].mean(),
                zoom=5,
                pitch=50,
            )

            deck = pdk.Deck(
                layers=[heatmap_layer],
                initial_view_state=view_state,
                tooltip={
                    "html": "<b>Valeur:</b> {Value}",
                    "style": {"color": "white"},
                },
            )

            st.pydeck_chart(deck)
            st.divider()

            st.subheader("Classement des villes")
            cities = sorted(filtered_data["City"].dropna().unique())
            selected_city = st.selectbox(
                "S√©lectionnez une ville :", options=cities
            )

            # Mise √† jour des valeurs de session pour le pays et la ville
            if selected_countries and selected_countries[0] != "All":
                st.session_state["selected_country"] = (
                    selected_countries[0]
                )
            else:
                st.session_state["selected_country"] = None

            if cities:
                st.session_state["selected_city"] = selected_city
            else:
                st.session_state["selected_city"] = None

            city_data = filtered_data[
                filtered_data["City"] == selected_city
            ]

            city_pollution = (
                filtered_data.groupby("City")["Value"]
                .mean()
                .sort_values(ascending=False)
                .reset_index()
            )
            city_pollution["Rang"] = city_pollution.index + 1

            if not city_data.empty:
                selected_city_rank = city_pollution[
                    city_pollution["City"] == selected_city
                ]
                st.write(
                    f"La ville **{selected_city}** est class√©e **#{selected_city_rank['Rang'].values[0]}** avec une pollution moyenne de **{selected_city_rank['Value'].values[0]:.2f}**."
                )
                st.table(city_pollution)

##### Page Infos touristiques de la ville

elif options == "üìç Infos touristiques de la ville":
    st.subheader(
        "Envie d'en savoir plus sur la ville s√©lectionn√©e ? üèôÔ∏è"
    )

    st.markdown(
        "<p style='font-size:16px;'>D√©couvrez des informations touristiques sur la ville que vous avez s√©lectionn√©e gr√¢ce √† Wikip√©dia et d'autres services interactifs.</p>",
        unsafe_allow_html=True,
    )
    st.divider()

    # R√©cup√©rer les pays disponibles
    countries = sorted(data["Country Label"].unique())
    default_country = st.session_state.get("selected_country", None)
    selected_country = st.selectbox(
        "S√©lectionnez un pays :",
        options=[None] + countries,
        index=([None] + countries).index(default_country),
    )

    # Filtrer les villes en fonction du pays s√©lectionn√©
    if selected_country:
        filtered_data = data[
            data["Country Label"] == selected_country
        ]
        cities = sorted(filtered_data["City"].dropna().unique())
    else:
        cities = []

    default_city = st.session_state.get("selected_city", None)
    selected_city = st.selectbox(
        "S√©lectionnez une ville :",
        options=[None] + cities,
        index=(
            ([None] + cities).index(default_city)
            if default_city in cities
            else 0
        ),
    )

    # Mettre √† jour les valeurs s√©lectionn√©es dans la session
    st.session_state["selected_country"] = selected_country
    st.session_state["selected_city"] = selected_city

    # Afficher les informations touristiques
    if selected_city and selected_country:
        st.write(
            f"Ville s√©lectionn√©e : **{selected_city}** ({selected_country})"
        )

        try:
            search_query = f"{selected_city}, {selected_country}"

            # R√©cup√©rer les informations depuis Wikip√©dia
            try:
                summary = wikipedia.summary(
                    search_query, sentences=3, auto_suggest=True
                )
                page = wikipedia.page(search_query)
            except (
                wikipedia.exceptions.DisambiguationError,
                wikipedia.exceptions.PageError,
            ):
                summary = wikipedia.summary(
                    selected_city, sentences=3, auto_suggest=True
                )
                page = wikipedia.page(selected_city)

            # Filtrer les images pertinentes
            keywords = [
                "landmark",
                "skyline",
                "view",
                "monument",
                "tourism",
                "architecture",
                "attraction",
            ]
            exclusion_keywords = ["flag", "logo", "map", "symbol"]
            filtered_images = [
                img
                for img in page.images
                if any(keyword in img.lower() for keyword in keywords)
                and not any(
                    keyword in img.lower()
                    for keyword in exclusion_keywords
                )
            ]

            # V√©rifier la r√©solution des images
            def is_high_resolution(image_url):
                try:
                    response = requests.get(image_url)
                    image = Image.open(BytesIO(response.content))
                    width, height = image.size
                    return width > 500 and height > 300
                except Exception:
                    return False

            high_res_images = [
                img
                for img in filtered_images
                if is_high_resolution(img)
            ]

            # Afficher une image si disponible
            if high_res_images:
                st.image(
                    high_res_images[0],
                    caption=f"Image embl√©matique de {selected_city}",
                    use_container_width=True,
                )
            elif filtered_images:
                st.image(
                    filtered_images[0],
                    caption=f"Image de {selected_city}",
                    use_container_width=True,
                )

            # Afficher le r√©sum√© et les liens utiles
            st.markdown(f"### √Ä propos de {selected_city}")
            st.write(summary)
            st.markdown(
                f"[üåê Lire l'article complet sur Wikip√©dia]({page.url})"
            )

            city_encoded = urllib.parse.quote(selected_city)
            country_encoded = urllib.parse.quote(selected_country)

            st.markdown(
                f"""
            ### Planifiez votre voyage √† {selected_city}
            - [Booking.com](https://www.booking.com/searchresults.html?ss={city_encoded})
            - [TripAdvisor](https://www.tripadvisor.com/Search?q={city_encoded})
            - [Rome2Rio](https://www.rome2rio.com/s/{city_encoded})
            - [üé• Regardez des vid√©os touristiques sur YouTube](https://www.youtube.com/results?search_query={city_encoded}+{country_encoded}+tourism)
            """
            )

        except wikipedia.exceptions.PageError:
            st.warning(
                f"Il n'y a pas de page Wikip√©dia pour **{selected_city}**."
            )
        except wikipedia.exceptions.DisambiguationError:
            st.warning(
                f"La recherche pour **{selected_city}** a renvoy√© plusieurs r√©sultats. Soyez plus pr√©cis."
            )
        except Exception as e:
            st.warning(
                "Une erreur s'est produite. Veuillez r√©essayer avec une autre ville."
            )
    else:
        st.warning(
            "Veuillez s√©lectionner une ville et un pays pour afficher les informations touristiques."
        )
